{"links": {"self": {"href": "data/repositories/osrf/gazebo_models/pullrequests/99/comments/3399375.json"}, "html": {"href": "#!/osrf/gazebo_models/pull-requests/99/_/diff#comment-3399375"}}, "deleted": false, "pullrequest": {"type": "pullrequest", "id": 99, "links": {"self": {"href": "data/repositories/osrf/gazebo_models/pullrequests/99.json"}, "html": {"href": "#!/osrf/gazebo_models/pull-requests/99"}}, "title": "Added wedge-juggler, schaal-juggler, and passive-dynamic-walker models"}, "content": {"raw": "I think the search plugins could be cleaned up/generalized a bit.\n\nOne thing I find odd is that the class contained in the plugin for a particular model and the class for its corresponding search plugin have the same name and share some of the same code (the onUpdate function for the controller is basically a subset of the search plugin, for example) but fulfill different functions... I wonder if the search functionality should be contained in the same class as the controller but could be toggled with a command line argument. Also, then the user could run the result of the search in simulation without restarting Gazebo, and the maintainers of this project wouldn't have to worry about twice as many model plugins.\n\nThe other thing is that the search functions share a lot of code between them--their function names are all the same, and their set_param and get_param functions are very similar. I think these could be abstracted into a \"SearchPlugin\" class, and the search functionality would then inherit from that class.", "markup": "markdown", "html": "<p>I think the search plugins could be cleaned up/generalized a bit.</p>\n<p>One thing I find odd is that the class contained in the plugin for a particular model and the class for its corresponding search plugin have the same name and share some of the same code (the onUpdate function for the controller is basically a subset of the search plugin, for example) but fulfill different functions... I wonder if the search functionality should be contained in the same class as the controller but could be toggled with a command line argument. Also, then the user could run the result of the search in simulation without restarting Gazebo, and the maintainers of this project wouldn't have to worry about twice as many model plugins.</p>\n<p>The other thing is that the search functions share a lot of code between them--their function names are all the same, and their set_param and get_param functions are very similar. I think these could be abstracted into a \"SearchPlugin\" class, and the search functionality would then inherit from that class.</p>", "type": "rendered"}, "created_on": "2014-10-09T22:34:37.140916+00:00", "user": {"display_name": "Jackie K", "uuid": "{e3d60b62-b7c7-4863-b9b9-cdae9f123cec}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D"}, "html": {"href": "https://bitbucket.org/%7Be3d60b62-b7c7-4863-b9b9-cdae9f123cec%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/ea011fa2919d4bd4568b32b440eda779d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJK-0.png"}}, "nickname": "jacquelinekay", "type": "user", "account_id": "557058:f56c822f-f75c-4665-80f9-6e7764893b9c"}, "updated_on": "2014-10-09T22:34:37.148806+00:00", "type": "pullrequest_comment", "id": 3399375}